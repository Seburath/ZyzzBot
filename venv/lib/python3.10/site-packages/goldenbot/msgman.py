#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from .telman import TelMan
from .keyboards import gen_keyboard
from .db import DBMan


class MsgMan(TelMan):
    """Messages manager for TelMan."""

    db = DBMan("PGContainer")

    def text_input(self, update, context):
        """Manage text inputs."""
        text = update.message.text
        print(text)

        if self.cmd != "":
            self.erase_msg(update.message.message_id)

        if self.status == "receiving trabajador":
            self.status == ""
            self.db.add_trabajador(text)
            self.update_keyboard_trabajadores()

        elif self.status == "receiving sacos":
            try:
                asd = int(text)
                self.saco["cantidad"] = text
                self.update_keyboard_sacos()
            except:
                pass

        elif self.status == "receiving pago":
            self.status == ""
            self.db.var_pagos(-int(text), self.pago_user, self.pago_type)
            saldo = str(self.db.get_pagos(self.pago_user))
            id = self.db.get_last_pago_id()[0]

            msg = (
                self.pago_type
                + ": $"
                + text
                + " a "
                + self.pago_user
                + "\nId: "
                + str(id)
                + "\nSaldo: $"
                + saldo
            )

            self.query.edit_message_text(msg, reply_markup=gen_keyboard("pagos"))

    def button_response(self, update, context):
        """Response in the button callback."""

        query = update.callback_query
        query.answer()
        button = query.data

        self.query = query

        if button == "Cancelar":
            id = self.db.get_last_bodega_id()

            query.edit_message_text(text=self.cmd + " cancelada")
            self.__init__()

        elif button == "Nuevo":

            msg = "Escriba el nombre del trabajador: \n"
            query.edit_message_text(msg)
            self.status = "receiving trabajador"

        elif button == "Quitar_trabajador":
            self.trabajadores = self.trabajadores[:-1]
            self.update_keyboard_trabajadores()

        elif button == "Quitar_saco":
            self.sacos = self.sacos[:-1]
            self.update_keyboard_sacos()

        elif button in ["polvo", "parrillero", "azucar", "otro", "grueso", "regular"]:
            self.add_to_saco("producto")

        elif button in ["nicovita", "blanco", "marcado"]:
            self.add_to_saco("tipo")

        elif button in ["abierto", "cerrado"]:
            self.add_to_saco("forma")

        elif button == "Continuar":

            if "---" not in self.saco.values():
                self.sacos.append(self.saco)
                self.clear_saco()

            self.update_keyboard_sacos()
            self.status = "receiving sacos"

        elif button == "Finalizar":
            print(self.trabajadores)
            print(self.sacos)

            self.clear_saco()
            self.register_sacos()
            id = self.db.get_last_bodega_id()

            if self.trabajadores != [] and self.sacos != []:
                query.edit_message_text(self.make_msg() + "REGISTRADO Id: " + str(id))
            else:
                query.edit_message_text(self.make_msg() + "NO REGISTRADO")

            self.__init__()

        elif button in ["Pago Normal", "Adelanto", "Prestamo"]:

            self.pago_type = button

            msg = self.pago_type + " a " + self.pago_user + ":\n"
            from .keyboards import gen_keyboard

            query.edit_message_text(
                msg, reply_markup=gen_keyboard("pago_especial")(self.db)
            )

        elif button in [trabajador[1] for trabajador in self.db.get_trabajadores()]:

            if self.status == "showing pagos" and self.is_admin_call():
                self.status = "receiving pago"
                self.pago_user = button

                msg = self.pago_type + " a " + button + ":\n"

                from .keyboards import gen_keyboard

                query.edit_message_text(
                    msg, reply_markup=gen_keyboard("pago_especial")(self.db)
                )

            elif self.status == "showing pagos" and not self.is_admin_call():
                query.delete_message()

            else:
                self.trabajadores.append(button)
                self.update_keyboard_trabajadores()
