#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from datetime import datetime

from .model import Trabajadores, Bodega, Pagos, Base
from .priceman import is_fd
from .connectors import Connector


class DBMan:
    """Database Manager for Golden Bot"""

    def __init__(self, conntype):
        connector = Connector(conntype)
        connector.Session.configure(bind=connector.engine)
        Base.metadata.create_all(connector.engine)

        self.session = connector.Session()

    def get_trabajadores(self):
        trabajadores = self.session.query(Trabajadores.id, Trabajadores.trabajador)
        return list(trabajadores)

    def add_trabajador(self, nombre):
        trabajador = Trabajadores(
            trabajador=nombre,
        )
        self.session.add(trabajador)
        self.session.commit()

    def rm_trabajador(self, id):
        trabajador = self.session.query(Trabajadores).filter_by(id=id).one()
        print(trabajador)
        self.session.delete(trabajador)
        self.session.commit()

    def get_inventario(self):
        query = self.session.query(Bodega.producto, Bodega.total).order_by(
            Bodega.id.desc()
        )

        if query is None:
            return {}

        productos = dict()
        for record in query:
            producto = record[0]
            total = record[1]

            if producto not in productos:
                productos[producto] = total

        return productos

    def get_last_bodega_id(self):
        var_id = self.session.query(Bodega.id).order_by(Bodega.id.desc()).first()

        if var_id is None:
            return 0

        elif var_id is not None:
            return var_id[0]

    def get_from_bodega(self, producto):
        total = (
            self.session.query(Bodega.total)
            .filter_by(producto=producto)
            .order_by(Bodega.id.desc())
            .first()
        )

        return 0 if total is None else total[0]

    def get_all_bodega_registers(self):
        bodega = self.session.query(
            Bodega.id,
            Bodega.producto,
            Bodega.trabajadores,
            Bodega.date,
            Bodega.var,
            Bodega.total,
        )

        return list(bodega)

    def var_bodega(self, producto, trabajadores, var):
        total = self.get_from_bodega(producto) + var

        var_bodega = Bodega(
            producto=producto,
            trabajadores=trabajadores,
            fd=is_fd(),
            date=str(datetime.now()),
            var=var,
            total=total,
        )

        self.session.add(var_bodega)
        self.session.commit()

    def rm_var_bodega(self, id):
        query = self.session.query(Bodega).filter_by(id=id).first()

        if query is not None:
            self.var_bodega(query.producto, "anulacion " + str(id), -query.var)
            self.session.commit()

    def bodega_var_is_fd(self, id):
        query = self.session.query(Bodega.fd).filter_by(id=id).first()
        return query[0]

    def make_fd(self, id):
        query = self.session.query(Bodega).filter_by(id=id).first()
        query.fd = True
        self.session.commit()

    def unmake_fd(self, id):
        query = self.session.query(Bodega).filter_by(id=id).first()
        query.fd = False
        self.session.commit()

    def get_pagos(self, user):
        query = (
            self.session.query(Pagos)
            .order_by(Pagos.id.desc())
            .filter_by(user=user)
            .first()
        )

        return 0 if query is None else query.total

    def get_all_pagos(self):
        registros = self.session.query(
            Pagos.id,
            Pagos.trabajador,
            Pagos.tipo,
            Pagos.fd,
            Pagos.date,
            Pagos.var,
            Pagos.total,
        )

        return [registro for registro in registros]

    def var_pagos(self, var, trabajador, tipo):
        query = (
            self.session.query(Pagos)
            .order_by(Pagos.id.desc())
            .filter_by(trabajador=trabajador)
            .first()
        )

        if query is not None:
            total = float(self.get_pagos(trabajador)) + var
            estiba = Pagos(
                user=trabajador,
                var=var,
                tipo=tipo,
                total=total,
            )
        else:
            estiba = Pagos(
                trabajador=trabajador,
                fecha_var=str(datetime.now()),
                var=var,
                tipo=tipo,
                total=var,
            )

        self.session.add(estiba)
        self.session.commit()

    def get_last_pago_id(self):
        pid = self.session.query(Pagos.id).order_by(Pagos.id.desc()).first()
        return pid

    def rm_pago(self, id):
        query = self.session.query(Pagos).filter_by(id=id).first()

        if query is not None:
            self.var_pagos(-query.var, query.trabajador, "anulacion " + str(id))
            self.session.commit()
