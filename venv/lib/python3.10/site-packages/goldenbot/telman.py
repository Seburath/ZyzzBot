#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import logging

from telegram.ext import Updater

from ordered_set import OrderedSet
from collections import OrderedDict

from .priceman import get_price
from .keyboards import gen_keyboard


logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)


class TelMan:
    """Telegram manager for GoldenBot."""

    chat_id = -591010482
    separator = "---------------------------------\n"

    def __init__(self):

        self.cmd = ""
        self.status = ""

        self.pago_user = ""
        self.pago_type = "Pago Normal"

        self.trabajadores = OrderedSet()
        self.sacos = []
        self.saco = OrderedDict()

        self.clear_saco()

    def clear_interfaces(self):
        pass

    def clear_saco(self):
        self.saco = {
            "cantidad": "---",
            "producto": "---",
            "tipo": "---",
            "forma": "---",
        }

    def register_sacos(self):
        for saco in self.sacos:
            for estibador in self.trabajadores:
                num_estibadores = len(self.trabajadores)
                ingresos_estiba = (
                    float(saco["cantidad"]) * float(get_price(self.cmd))
                ) // num_estibadores

                self.db.var_pagos(ingresos_estiba, estibador, self.cmd)

            txtsaco = " ".join([saco["producto"], saco["tipo"], saco["forma"]])
            self.db.var_bodega(
                txtsaco, " ".join(self.trabajadores), int(saco["cantidad"])
            )

    def add_to_saco(self, position):
        self.saco[position] = self.query.data
        self.update_keyboard_sacos()

    def make_msg(self):
        msg = f"{self.cmd} de: \n"
        msg += " / ".join(self.trabajadores) + "\n"
        msg += self.separator

        for saco in self.sacos:
            msg += f"[{saco['cantidad']} {saco['producto']} {saco['tipo']} {saco['forma']}]\n"

        msg += self.separator
        msg += f"[{self.saco['cantidad']}] [{self.saco['producto']}] [{self.saco['tipo']}] [{self.saco['forma']}]\n"

        return msg

    def reply(self, msg=None):
        if msg is None:
            msg = self.make_msg()

        keyboard_generator = gen_keyboard(self.cmd)
        if keyboard_generator is not None:
            keyboard = keyboard_generator(self.db)
        else:
            keyboard = None

        reply = self.update.message.reply_text
        reply(msg, reply_markup=keyboard)

    def get_inventario(self):
        inventario = []
        productos = self.db.get_inventario()

        for producto in productos:
            inventario.append(producto + ": " + str(productos[producto]))

        inventario.sort()

        return "\n".join(inventario)

    def is_admin_call(self):
        get_admins = self.update.effective_chat.get_administrators
        user = self.update.message.from_user.username
        admins = [admin.user.username for admin in get_admins(abs(self.chat_id))]

        return user in admins

    def in_goldenchat(self):
        chat = self.update.effective_chat

        return chat["id"] == self.chat_id

    def is_admin_in_goldenchat():
        return self.is_admin_call() and self.in_goldenchat()

    def update_keyboard_sacos(self):
        keyboard_generator = gen_keyboard("sacos")
        keyboard = keyboard_generator(self.db)
        self.query.edit_message_text(self.make_msg(), reply_markup=keyboard)

    def update_keyboard_trabajadores(self):
        self.query.edit_message_text(
            self.make_msg(), reply_markup=gen_keyboard(self.cmd)(self.db)
        )

    def log_errors(self, update, context):
        """Log Errors caused by Updates."""
        logger.warning('Update "%s" caused error "%s"', update, context.error)
